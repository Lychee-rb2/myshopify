type Query {
    asset(id: String!, preview: Boolean, locale: String): Asset
    assetCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
        where: AssetFilter
        order: [AssetOrder]
    ): AssetCollection
    global(id: String!, preview: Boolean, locale: String): Global
    globalCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
        where: GlobalFilter
        order: [GlobalOrder]
    ): GlobalCollection
    social(id: String!, preview: Boolean, locale: String): Social
    socialCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
        where: SocialFilter
        order: [SocialOrder]
    ): SocialCollection
    people(id: String!, preview: Boolean, locale: String): People
    peopleCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
        where: PeopleFilter
        order: [PeopleOrder]
    ): PeopleCollection
    page(id: String!, preview: Boolean, locale: String): Page
    pageCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
        where: PageFilter
        order: [PageOrder]
    ): PageCollection
    seo(id: String!, preview: Boolean, locale: String): Seo
    seoCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
        where: SeoFilter
        order: [SeoOrder]
    ): SeoCollection
    media(id: String!, preview: Boolean, locale: String): Media
    mediaCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
        where: MediaFilter
        order: [MediaOrder]
    ): MediaCollection
    shared(id: String!, preview: Boolean, locale: String): Shared
    sharedCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
        where: SharedFilter
        order: [SharedOrder]
    ): SharedCollection
    entryCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
        where: EntryFilter
        order: [EntryOrder]
    ): EntryCollection
}

# Represents a binary file in a space. An asset can be any file type.
type Asset {
    sys: Sys!
    contentfulMetadata: ContentfulMetadata!
    title(locale: String): String
    description(locale: String): String
    contentType(locale: String): String
    fileName(locale: String): String
    size(locale: String): Int
    url(transform: ImageTransformOptions, locale: String): String
    width(locale: String): Int
    height(locale: String): Int
    linkedFrom(allowedLocales: [String]): AssetLinkingCollections
}

type Sys {
    id: String!
    spaceId: String!
    environmentId: String!
    publishedAt: DateTime
    firstPublishedAt: DateTime
    publishedVersion: Int
}

# A date-time string at UTC, such as 2007-12-03T10:15:30Z,
#     compliant with the 'date-time' format outlined in section 5.6 of
#     the RFC 3339 profile of the ISO 8601 standard for representation
#     of dates and times using the Gregorian calendar.
scalar DateTime

type ContentfulMetadata {
    tags: [ContentfulTag]!
}

# Represents a tag entity for finding and organizing content easily.
#     Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
type ContentfulTag {
    id: String
    name: String
}

input ImageTransformOptions {
    # Desired width in pixels. Defaults to the original image width.
    width: Dimension

    # Desired height in pixels. Defaults to the original image height.
    height: Dimension

    # Desired quality of the image in percents.
    #         Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
    quality: Quality

    # Desired corner radius in pixels.
    #         Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
    #         Defaults to `0`. Uses desired background color as padding color,
    #         unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
    cornerRadius: Int

    # Desired resize strategy. Defaults to `FIT`.
    resizeStrategy: ImageResizeStrategy

    # Desired resize focus area. Defaults to `CENTER`.
    resizeFocus: ImageResizeFocus

    # Desired background color, used with corner radius or `PAD` resize strategy.
    #         Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
    backgroundColor: HexColor

    # Desired image format. Defaults to the original image format.
    format: ImageFormat
}

# The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
scalar Dimension

# The 'Quality' type represents quality as whole numeric values between `1` and `100`.
scalar Quality

enum ImageResizeStrategy {
    # Resizes the image to fit into the specified dimensions.
    FIT

    # Resizes the image to the specified dimensions, padding the image if needed.
    #         Uses desired background color as padding color.
    PAD

    # Resizes the image to the specified dimensions, cropping the image if needed.
    FILL

    # Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
    SCALE

    # Crops a part of the original image to fit into the specified dimensions.
    CROP

    # Creates a thumbnail from the image.
    THUMB
}

enum ImageResizeFocus {
    # Focus the resizing on the center.
    CENTER

    # Focus the resizing on the top.
    TOP

    # Focus the resizing on the top right.
    TOP_RIGHT

    # Focus the resizing on the right.
    RIGHT

    # Focus the resizing on the bottom right.
    BOTTOM_RIGHT

    # Focus the resizing on the bottom.
    BOTTOM

    # Focus the resizing on the bottom left.
    BOTTOM_LEFT

    # Focus the resizing on the left.
    LEFT

    # Focus the resizing on the top left.
    TOP_LEFT

    # Focus the resizing on the largest face.
    FACE

    # Focus the resizing on the area containing all the faces.
    FACES
}

# The 'HexColor' type represents color in `rgb:ffffff` string format.
scalar HexColor

enum ImageFormat {
    # JPG image format.
    JPG

    # Progressive JPG format stores multiple passes of an image in progressively higher detail.
    #         When a progressive image is loading, the viewer will first see a lower quality pixelated version which
    #         will gradually improve in detail, until the image is fully downloaded. This is to display an image as
    #         early as possible to make the layout look as designed.
    JPG_PROGRESSIVE

    # PNG image format
    PNG

    # 8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
    #         The 8-bit PNG format is mostly used for simple images, such as icons or logos.
    PNG8

    # WebP image format.
    WEBP
    AVIF
}

type AssetLinkingCollections {
    entryCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): EntryCollection
    globalCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): GlobalCollection
    peopleCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): PeopleCollection
    mediaCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): MediaCollection
}

type EntryCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Entry]!
}

interface Entry {
    sys: Sys!
    contentfulMetadata: ContentfulMetadata!
}

type GlobalCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Global]!
}

# [See type definition](https://app.contentful.com/spaces/lvc7wgiuntle/content_types/global)
type Global implements Entry {
    sys: Sys!
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): GlobalLinkingCollections
    title(locale: String): String
    icon(preview: Boolean, locale: String): Asset
    seo(preview: Boolean, locale: String): Seo
    headerMenuCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): GlobalHeaderMenuCollection
    footerMenuCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): GlobalFooterMenuCollection
    serverPolicy(locale: String): GlobalServerPolicy
}

type GlobalLinkingCollections {
    entryCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): EntryCollection
}

# [See type definition](https://app.contentful.com/spaces/lvc7wgiuntle/content_types/seo)
type Seo implements Entry {
    sys: Sys!
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): SeoLinkingCollections
    title(locale: String): String
    description(locale: String): String
    keyword(locale: String): [String]
}

type SeoLinkingCollections {
    entryCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): EntryCollection
    globalCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): GlobalCollection
}

type GlobalHeaderMenuCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Page]!
}

# [See type definition](https://app.contentful.com/spaces/lvc7wgiuntle/content_types/page)
type Page implements Entry {
    sys: Sys!
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): PageLinkingCollections
    title(locale: String): String
    slug(locale: String): String
    sliceCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): PageSliceCollection
}

type PageLinkingCollections {
    entryCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): EntryCollection
    globalCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): GlobalCollection
}

type PageSliceCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [People]!
}

# [See type definition](https://app.contentful.com/spaces/lvc7wgiuntle/content_types/people)
type People implements Entry {
    sys: Sys!
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): PeopleLinkingCollections
    name(locale: String): String
    title(locale: String): String
    job(locale: String): String
    avatar(preview: Boolean, locale: String): Asset
    description(locale: String): PeopleDescription
    socialCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): PeopleSocialCollection
    sliceSpacing(locale: String): String
}

type PeopleLinkingCollections {
    entryCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): EntryCollection
    socialCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): SocialCollection
    pageCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): PageCollection
}

type SocialCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Social]!
}

# [See type definition](https://app.contentful.com/spaces/lvc7wgiuntle/content_types/social)
type Social implements Entry {
    sys: Sys!
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): SocialLinkingCollections
    link(locale: String): String
    type(locale: String): String
    label(locale: String): String
    people(preview: Boolean, locale: String): People
}

type SocialLinkingCollections {
    entryCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): EntryCollection
    peopleCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): PeopleCollection
}

type PeopleCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [People]!
}

type PageCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Page]!
}

type PeopleDescription {
    json: JSON!
    links: PeopleDescriptionLinks!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type PeopleDescriptionLinks {
    entries: PeopleDescriptionEntries!
    assets: PeopleDescriptionAssets!
}

type PeopleDescriptionEntries {
    inline: [Entry]!
    hyperlink: [Entry]!
    block: [Entry]!
}

type PeopleDescriptionAssets {
    hyperlink: [Asset]!
    block: [Asset]!
}

type PeopleSocialCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Social]!
}

type GlobalFooterMenuCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Page]!
}

type GlobalServerPolicy {
    json: JSON!
    links: GlobalServerPolicyLinks!
}

type GlobalServerPolicyLinks {
    entries: GlobalServerPolicyEntries!
    assets: GlobalServerPolicyAssets!
}

type GlobalServerPolicyEntries {
    inline: [Entry]!
    hyperlink: [Entry]!
    block: [Entry]!
}

type GlobalServerPolicyAssets {
    hyperlink: [Asset]!
    block: [Asset]!
}

type MediaCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Media]!
}

# [See type definition](https://app.contentful.com/spaces/lvc7wgiuntle/content_types/media)
type Media implements Entry {
    sys: Sys!
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): MediaLinkingCollections
    title(locale: String): String
    image(preview: Boolean, locale: String): Asset
    itemCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): MediaItemCollection
}

type MediaLinkingCollections {
    entryCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): EntryCollection
}

type MediaItemCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Shared]!
}

# [See type definition](https://app.contentful.com/spaces/lvc7wgiuntle/content_types/shared)
type Shared implements Entry {
    sys: Sys!
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): SharedLinkingCollections
    title(locale: String): String
    price(locale: String): Float
    when(locale: String): DateTime
    note(locale: String): String
}

type SharedLinkingCollections {
    entryCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): EntryCollection
    mediaCollection(
        skip: Int = 0
        limit: Int = 100
        preview: Boolean
        locale: String
    ): MediaCollection
}

type AssetCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Asset]!
}

input AssetFilter {
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    title_exists: Boolean
    title: String
    title_not: String
    title_in: [String]
    title_not_in: [String]
    title_contains: String
    title_not_contains: String
    description_exists: Boolean
    description: String
    description_not: String
    description_in: [String]
    description_not_in: [String]
    description_contains: String
    description_not_contains: String
    url_exists: Boolean
    url: String
    url_not: String
    url_in: [String]
    url_not_in: [String]
    url_contains: String
    url_not_contains: String
    size_exists: Boolean
    size: Int
    size_not: Int
    size_in: [Int]
    size_not_in: [Int]
    size_gt: Int
    size_gte: Int
    size_lt: Int
    size_lte: Int
    contentType_exists: Boolean
    contentType: String
    contentType_not: String
    contentType_in: [String]
    contentType_not_in: [String]
    contentType_contains: String
    contentType_not_contains: String
    fileName_exists: Boolean
    fileName: String
    fileName_not: String
    fileName_in: [String]
    fileName_not_in: [String]
    fileName_contains: String
    fileName_not_contains: String
    width_exists: Boolean
    width: Int
    width_not: Int
    width_in: [Int]
    width_not_in: [Int]
    width_gt: Int
    width_gte: Int
    width_lt: Int
    width_lte: Int
    height_exists: Boolean
    height: Int
    height_not: Int
    height_in: [Int]
    height_not_in: [Int]
    height_gt: Int
    height_gte: Int
    height_lt: Int
    height_lte: Int
    OR: [AssetFilter]
    AND: [AssetFilter]
}

input SysFilter {
    id_exists: Boolean
    id: String
    id_not: String
    id_in: [String]
    id_not_in: [String]
    id_contains: String
    id_not_contains: String
    publishedAt_exists: Boolean
    publishedAt: DateTime
    publishedAt_not: DateTime
    publishedAt_in: [DateTime]
    publishedAt_not_in: [DateTime]
    publishedAt_gt: DateTime
    publishedAt_gte: DateTime
    publishedAt_lt: DateTime
    publishedAt_lte: DateTime
    firstPublishedAt_exists: Boolean
    firstPublishedAt: DateTime
    firstPublishedAt_not: DateTime
    firstPublishedAt_in: [DateTime]
    firstPublishedAt_not_in: [DateTime]
    firstPublishedAt_gt: DateTime
    firstPublishedAt_gte: DateTime
    firstPublishedAt_lt: DateTime
    firstPublishedAt_lte: DateTime
    publishedVersion_exists: Boolean
    publishedVersion: Float
    publishedVersion_not: Float
    publishedVersion_in: [Float]
    publishedVersion_not_in: [Float]
    publishedVersion_gt: Float
    publishedVersion_gte: Float
    publishedVersion_lt: Float
    publishedVersion_lte: Float
}

input ContentfulMetadataFilter {
    tags_exists: Boolean
    tags: ContentfulMetadataTagsFilter
}

input ContentfulMetadataTagsFilter {
    id_contains_all: [String]
    id_contains_some: [String]
    id_contains_none: [String]
}

enum AssetOrder {
    url_ASC
    url_DESC
    size_ASC
    size_DESC
    contentType_ASC
    contentType_DESC
    fileName_ASC
    fileName_DESC
    width_ASC
    width_DESC
    height_ASC
    height_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

input GlobalFilter {
    seo: cfSeoNestedFilter
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    title_exists: Boolean
    title: String
    title_not: String
    title_in: [String]
    title_not_in: [String]
    title_contains: String
    title_not_contains: String
    icon_exists: Boolean
    seo_exists: Boolean
    headerMenuCollection_exists: Boolean
    footerMenuCollection_exists: Boolean
    serverPolicy_exists: Boolean
    serverPolicy_contains: String
    serverPolicy_not_contains: String
    OR: [GlobalFilter]
    AND: [GlobalFilter]
}

input cfSeoNestedFilter {
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    title_exists: Boolean
    title: String
    title_not: String
    title_in: [String]
    title_not_in: [String]
    title_contains: String
    title_not_contains: String
    description_exists: Boolean
    description: String
    description_not: String
    description_in: [String]
    description_not_in: [String]
    description_contains: String
    description_not_contains: String
    keyword_exists: Boolean
    keyword_contains_all: [String]
    keyword_contains_some: [String]
    keyword_contains_none: [String]
    OR: [cfSeoNestedFilter]
    AND: [cfSeoNestedFilter]
}

enum GlobalOrder {
    title_ASC
    title_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

input SocialFilter {
    people: cfPeopleNestedFilter
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    link_exists: Boolean
    link: String
    link_not: String
    link_in: [String]
    link_not_in: [String]
    link_contains: String
    link_not_contains: String
    type_exists: Boolean
    type: String
    type_not: String
    type_in: [String]
    type_not_in: [String]
    type_contains: String
    type_not_contains: String
    label_exists: Boolean
    label: String
    label_not: String
    label_in: [String]
    label_not_in: [String]
    label_contains: String
    label_not_contains: String
    people_exists: Boolean
    OR: [SocialFilter]
    AND: [SocialFilter]
}

input cfPeopleNestedFilter {
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    name_exists: Boolean
    name: String
    name_not: String
    name_in: [String]
    name_not_in: [String]
    name_contains: String
    name_not_contains: String
    title_exists: Boolean
    title: String
    title_not: String
    title_in: [String]
    title_not_in: [String]
    title_contains: String
    title_not_contains: String
    job_exists: Boolean
    job: String
    job_not: String
    job_in: [String]
    job_not_in: [String]
    job_contains: String
    job_not_contains: String
    avatar_exists: Boolean
    description_exists: Boolean
    description_contains: String
    description_not_contains: String
    socialCollection_exists: Boolean
    sliceSpacing_exists: Boolean
    sliceSpacing: String
    sliceSpacing_not: String
    sliceSpacing_in: [String]
    sliceSpacing_not_in: [String]
    sliceSpacing_contains: String
    sliceSpacing_not_contains: String
    OR: [cfPeopleNestedFilter]
    AND: [cfPeopleNestedFilter]
}

enum SocialOrder {
    link_ASC
    link_DESC
    type_ASC
    type_DESC
    label_ASC
    label_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

input PeopleFilter {
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    name_exists: Boolean
    name: String
    name_not: String
    name_in: [String]
    name_not_in: [String]
    name_contains: String
    name_not_contains: String
    title_exists: Boolean
    title: String
    title_not: String
    title_in: [String]
    title_not_in: [String]
    title_contains: String
    title_not_contains: String
    job_exists: Boolean
    job: String
    job_not: String
    job_in: [String]
    job_not_in: [String]
    job_contains: String
    job_not_contains: String
    avatar_exists: Boolean
    description_exists: Boolean
    description_contains: String
    description_not_contains: String
    socialCollection_exists: Boolean
    sliceSpacing_exists: Boolean
    sliceSpacing: String
    sliceSpacing_not: String
    sliceSpacing_in: [String]
    sliceSpacing_not_in: [String]
    sliceSpacing_contains: String
    sliceSpacing_not_contains: String
    OR: [PeopleFilter]
    AND: [PeopleFilter]
}

enum PeopleOrder {
    name_ASC
    name_DESC
    title_ASC
    title_DESC
    job_ASC
    job_DESC
    sliceSpacing_ASC
    sliceSpacing_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

input PageFilter {
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    title_exists: Boolean
    title: String
    title_not: String
    title_in: [String]
    title_not_in: [String]
    title_contains: String
    title_not_contains: String
    slug_exists: Boolean
    slug: String
    slug_not: String
    slug_in: [String]
    slug_not_in: [String]
    slug_contains: String
    slug_not_contains: String
    sliceCollection_exists: Boolean
    OR: [PageFilter]
    AND: [PageFilter]
}

enum PageOrder {
    title_ASC
    title_DESC
    slug_ASC
    slug_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

type SeoCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Seo]!
}

input SeoFilter {
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    title_exists: Boolean
    title: String
    title_not: String
    title_in: [String]
    title_not_in: [String]
    title_contains: String
    title_not_contains: String
    description_exists: Boolean
    description: String
    description_not: String
    description_in: [String]
    description_not_in: [String]
    description_contains: String
    description_not_contains: String
    keyword_exists: Boolean
    keyword_contains_all: [String]
    keyword_contains_some: [String]
    keyword_contains_none: [String]
    OR: [SeoFilter]
    AND: [SeoFilter]
}

enum SeoOrder {
    title_ASC
    title_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

input MediaFilter {
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    title_exists: Boolean
    title: String
    title_not: String
    title_in: [String]
    title_not_in: [String]
    title_contains: String
    title_not_contains: String
    image_exists: Boolean
    itemCollection_exists: Boolean
    OR: [MediaFilter]
    AND: [MediaFilter]
}

enum MediaOrder {
    title_ASC
    title_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

type SharedCollection {
    total: Int!
    skip: Int!
    limit: Int!
    items: [Shared]!
}

input SharedFilter {
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    title_exists: Boolean
    title: String
    title_not: String
    title_in: [String]
    title_not_in: [String]
    title_contains: String
    title_not_contains: String
    price_exists: Boolean
    price: Float
    price_not: Float
    price_in: [Float]
    price_not_in: [Float]
    price_gt: Float
    price_gte: Float
    price_lt: Float
    price_lte: Float
    when_exists: Boolean
    when: DateTime
    when_not: DateTime
    when_in: [DateTime]
    when_not_in: [DateTime]
    when_gt: DateTime
    when_gte: DateTime
    when_lt: DateTime
    when_lte: DateTime
    note_exists: Boolean
    note: String
    note_not: String
    note_in: [String]
    note_not_in: [String]
    note_contains: String
    note_not_contains: String
    OR: [SharedFilter]
    AND: [SharedFilter]
}

enum SharedOrder {
    title_ASC
    title_DESC
    price_ASC
    price_DESC
    when_ASC
    when_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

input EntryFilter {
    sys: SysFilter
    contentfulMetadata: ContentfulMetadataFilter
    OR: [EntryFilter]
    AND: [EntryFilter]
}

enum EntryOrder {
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}
